#http server
server.bind_address = 0.0.0.0:9277            ; http server监听地址
server.read_timeout = 10                      ; http读取超时时间, 单位秒
server.write_timeout = 10                     ; http写入超时时间, 单位秒

#redis配置
redis.host = "127.0.0.1:6379"                 ; redis连接地址
redis.db = 1                                  ; 建议选择未被使用的数据库或新建redis实例，防止key冲突
redis.password = ""                           ; redis密码, 无需密码留空
redis.max_idle = 10                           ; redis连接池最大空闲连接数
redis.max_active = 10                         ; redis连接池最大激活连接数, 0为不限制
redis.idle_timeout = 240                      ; redis空闲连接超时时间
redis.connect_timeout = 5000                  ; redis连接超时时间, 单位毫秒
redis.read_timeout = 5000                     ; redis读取超时时间, 单位毫秒
redis.write_timeout = 5000                    ; redis写入超时时间, 单位毫秒

#redis队列配置
redisqueue.bucket_size = 10                   ; redis zset 分桶数量
redisqueue.bucket_name = "dq_bucket_%d"       ; bucket在redis中的键名, %d为桶号(必须保留)

#kafka配置
kafka.group_id = "delay-queue-consumer"      ; 消费者,负责消费各个延迟topic
kafka.bootstrap_servers = "127.0.0.1:9093"    ; kafka broker servers
kafka.security_protocol = "PLAINTEXT"
kafka.sasl_mechanism = ""
kafka.sasl_username = ""
kafka.sasl_password = ""

#kafka队列配置
kafkaqueue.delay_durations = "5s,10s,1m,5m,1h" ; 支持的延迟时间, 根据delay_ttl寻找最接近的topic投递
kafkaqueue.delay_topic = "delay_topic_%s"      ; 延迟topic名字, %s表示延迟时间(必须保留)
kafkaqueue.delay_partition_groups = "[[0,1]]"  ; 二维数组, 第一维数表示N个独立消费进程, 每个消费者负责消费对应的partition集合

#日志设置
log.log_path = "./logs"                        ; 日志目录
log.log_name = "delay-queue.log"               ; 日志名
log.log_level = "debug"                        ; 日志级别

#job设置
job.extent_ttl = 86400                         ; job存储额外时长, 单位秒, 0表示过期时间为delay_ttl
job.key        = "delay_job:%s"                ; job在redis的键名, %s表示任务id(必须保留)